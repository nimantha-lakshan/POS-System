package GUI;

import Database.DB;
import Model.Exit_Warning;
import Model.Save;
import Model.Validation;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.io.File;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

public class Invoice extends javax.swing.JFrame {

    private final DecimalFormat decimalformat = new DecimalFormat("00.00");
    private final SimpleDateFormat dateFomrmat = new SimpleDateFormat("yyyy-MM-dd");

    private Main menu;
    private String customerId;

    private String stock_id;
    private String product_id;
    private String product_name;
    private String product_unit;
    private double retailPrice;
    private double quantity;

    public Invoice() {
        initComponents();
        generateID();
        tableSettings();
        date.setDate(new Date());
        productCode.grabFocus();
        loadCustomers();
        JTextFieldDateEditor f = (JTextFieldDateEditor) date.getDateEditor();
        f.setEditable(false);
        f.setBackground(Color.WHITE);
    }

    public Invoice(Main m) {
        this();
        this.menu = m;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel = new javax.swing.JPanel();
        qty = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        invoice_ID = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        productCode = new javax.swing.JTextField();
        txt_subTotal = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txt_Discount = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txt_netTotal = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        paidAmount = new javax.swing.JTextField();
        btn_Cancel = new javax.swing.JButton();
        btn_Save = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        balance = new javax.swing.JTextField();
        customer_Name = new javax.swing.JComboBox<>();
        cash = new javax.swing.JRadioButton();
        card = new javax.swing.JRadioButton();
        PaymentMethod = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        productName = new javax.swing.JLabel();
        unitProduct = new javax.swing.JLabel();
        checkAvailability = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btn_find = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setPreferredSize(new java.awt.Dimension(1170, 710));
        panel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                panelFocusLost(evt);
            }
        });
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        qty.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        qty.setForeground(new java.awt.Color(39, 55, 70));
        qty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyKeyTyped(evt);
            }
        });
        panel.add(qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 120, 140, 25));

        jScrollPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        table.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Stock ID", "Product Code", "Product Name", "Unit", "Quantity", "Discount", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        table.setGridColor(new java.awt.Color(204, 204, 204));
        table.setRowHeight(30);
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(40);
            table.getColumnModel().getColumn(1).setPreferredWidth(100);
            table.getColumnModel().getColumn(2).setPreferredWidth(130);
            table.getColumnModel().getColumn(3).setPreferredWidth(400);
            table.getColumnModel().getColumn(4).setPreferredWidth(86);
            table.getColumnModel().getColumn(5).setPreferredWidth(100);
            table.getColumnModel().getColumn(6).setPreferredWidth(120);
            table.getColumnModel().getColumn(7).setPreferredWidth(171);
        }

        panel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 1150, 340));

        invoice_ID.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        invoice_ID.setForeground(new java.awt.Color(66, 73, 73));
        panel.add(invoice_ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 220, 25));

        jLabel24.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(66, 73, 73));
        jLabel24.setText("Customer");
        panel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 80, 25));

        jLabel25.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(66, 73, 73));
        jLabel25.setText("Product Code");
        panel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 90, 25));

        productCode.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        productCode.setForeground(new java.awt.Color(39, 55, 70));
        productCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeActionPerformed(evt);
            }
        });
        panel.add(productCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 190, 25));

        txt_subTotal.setEditable(false);
        txt_subTotal.setBackground(new java.awt.Color(255, 255, 255));
        txt_subTotal.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_subTotal.setForeground(new java.awt.Color(39, 55, 70));
        txt_subTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_subTotal.setText("0.00");
        panel.add(txt_subTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 540, 180, 30));

        jLabel28.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(66, 73, 73));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Sub Total");
        panel.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 540, 60, 30));

        date.setBackground(new java.awt.Color(255, 255, 255));
        date.setDateFormatString("yyyy-MM-dd");
        date.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        panel.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 80, 170, 25));

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(66, 73, 73));
        jLabel6.setText("Quantity");
        panel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 80, 25));

        jLabel32.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(66, 73, 73));
        jLabel32.setText("Invoice No");
        panel.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 80, 25));

        jLabel34.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(66, 73, 73));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Discount  (%)");
        panel.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 575, 100, 30));

        txt_Discount.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_Discount.setForeground(new java.awt.Color(39, 55, 70));
        txt_Discount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_Discount.setText("0");
        txt_Discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_DiscountActionPerformed(evt);
            }
        });
        txt_Discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_DiscountKeyTyped(evt);
            }
        });
        panel.add(txt_Discount, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 575, 180, 30));

        jLabel36.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(66, 73, 73));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Net Total");
        panel.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 610, 60, 30));

        txt_netTotal.setEditable(false);
        txt_netTotal.setBackground(new java.awt.Color(255, 255, 255));
        txt_netTotal.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        txt_netTotal.setForeground(new java.awt.Color(39, 55, 70));
        txt_netTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_netTotal.setText("0.00");
        panel.add(txt_netTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 610, 180, 30));

        jLabel37.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(66, 73, 73));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Paid");
        panel.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 540, 60, 30));

        paidAmount.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        paidAmount.setForeground(new java.awt.Color(39, 55, 70));
        paidAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        paidAmount.setText("0.00");
        paidAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidAmountActionPerformed(evt);
            }
        });
        paidAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidAmountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                paidAmountKeyTyped(evt);
            }
        });
        panel.add(paidAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 540, 180, 30));

        btn_Cancel.setBackground(new java.awt.Color(179, 182, 183));
        btn_Cancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_Cancel.setText("Cancel");
        btn_Cancel.setBorder(null);
        btn_Cancel.setBorderPainted(false);
        btn_Cancel.setContentAreaFilled(false);
        btn_Cancel.setFocusPainted(false);
        btn_Cancel.setOpaque(true);
        btn_Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_CancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_CancelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_CancelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_CancelMouseReleased(evt);
            }
        });
        btn_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CancelActionPerformed(evt);
            }
        });
        panel.add(btn_Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 640, 110, 40));

        btn_Save.setBackground(new java.awt.Color(38, 57, 75));
        btn_Save.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_Save.setForeground(new java.awt.Color(255, 255, 255));
        btn_Save.setText("Save");
        btn_Save.setBorder(null);
        btn_Save.setBorderPainted(false);
        btn_Save.setContentAreaFilled(false);
        btn_Save.setFocusPainted(false);
        btn_Save.setOpaque(true);
        btn_Save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_SaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_SaveMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_SaveMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_SaveMouseReleased(evt);
            }
        });
        btn_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SaveActionPerformed(evt);
            }
        });
        panel.add(btn_Save, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 640, 110, 40));

        jLabel38.setFont(new java.awt.Font("Calibri", 1, 17)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 153, 51));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Balance");
        panel.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 575, 60, 40));

        balance.setEditable(false);
        balance.setBackground(new java.awt.Color(255, 255, 255));
        balance.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        balance.setForeground(new java.awt.Color(39, 55, 70));
        balance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        balance.setText("0.00");
        panel.add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 575, 180, 40));

        customer_Name.setEditable(true);
        customer_Name.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        customer_Name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Select a Customer -" }));
        customer_Name.setFocusable(false);
        customer_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customer_NameActionPerformed(evt);
            }
        });
        panel.add(customer_Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 210, 25));

        buttonGroup1.add(cash);
        cash.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        cash.setForeground(new java.awt.Color(0, 51, 204));
        cash.setSelected(true);
        cash.setText(" CASH");
        cash.setFocusable(false);
        cash.setOpaque(false);
        cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashActionPerformed(evt);
            }
        });
        panel.add(cash, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 580, -1, 30));

        buttonGroup1.add(card);
        card.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        card.setForeground(new java.awt.Color(0, 51, 204));
        card.setText(" CARD");
        card.setFocusable(false);
        card.setOpaque(false);
        card.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardActionPerformed(evt);
            }
        });
        panel.add(card, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 580, -1, 30));

        PaymentMethod.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        PaymentMethod.setForeground(new java.awt.Color(102, 0, 255));
        PaymentMethod.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)), "PAYMENT METHOD", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 15), new java.awt.Color(255, 51, 51))); // NOI18N
        panel.add(PaymentMethod, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 560, 300, 60));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(52, 73, 94));
        jLabel2.setText("Invoice");
        panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 360, 50));

        productName.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        productName.setForeground(new java.awt.Color(0, 153, 102));
        productName.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panel.add(productName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 490, 25));

        unitProduct.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        unitProduct.setForeground(new java.awt.Color(0, 0, 153));
        unitProduct.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        panel.add(unitProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 60, 25));

        checkAvailability.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        checkAvailability.setForeground(new java.awt.Color(0, 0, 153));
        panel.add(checkAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 120, 160, 25));

        jLabel12.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(66, 73, 73));
        jLabel12.setText("Date");
        panel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, 40, 25));

        btn_find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/find_1.png"))); // NOI18N
        btn_find.setBorderPainted(false);
        btn_find.setFocusPainted(false);
        btn_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_findActionPerformed(evt);
            }
        });
        panel.add(btn_find, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 120, 26, 26));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1170, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_SaveMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseReleased
        btn_Save.setBackground(new Color(38, 57, 75));
    }//GEN-LAST:event_btn_SaveMouseReleased

    private void btn_SaveMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMousePressed
        btn_Save.setBackground(new Color(21, 67, 96));
    }//GEN-LAST:event_btn_SaveMousePressed

    private void btn_SaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseExited
        btn_Save.setBackground(new Color(38, 57, 75));
    }//GEN-LAST:event_btn_SaveMouseExited

    private void btn_SaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_SaveMouseEntered
        btn_Save.setBackground(new Color(31, 97, 141));
    }//GEN-LAST:event_btn_SaveMouseEntered

    private void btn_CancelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseReleased
        btn_Cancel.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_CancelMouseReleased

    private void btn_CancelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMousePressed
        btn_Cancel.setBackground(new Color(98, 101, 103));
    }//GEN-LAST:event_btn_CancelMousePressed

    private void btn_CancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseExited
        btn_Cancel.setBackground(new Color(179, 182, 183));
    }//GEN-LAST:event_btn_CancelMouseExited

    private void btn_CancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_CancelMouseEntered
        btn_Cancel.setBackground(new Color(144, 148, 151));
    }//GEN-LAST:event_btn_CancelMouseEntered

    private void customer_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customer_NameActionPerformed
        try {
            ResultSet rs = DB.search("SELECT id_customer FROM customer "
                    + "WHERE fname = '" + customer_Name.getSelectedItem().toString().trim().split(" ")[0].trim() + "' AND lname = '" + customer_Name.getSelectedItem().toString().trim().split(" ")[1].trim() + "' ");
            if (rs.next()) {
                customerId = rs.getString("id_customer");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_customer_NameActionPerformed

    private void txt_DiscountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyTyped
        Validation.setDigitsOnly(evt);
        Validation.setLength(evt, txt_Discount.getText(), 3);
        if (Character.isLetter(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_DiscountKeyTyped

    private void paidAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyTyped
        Validation.setLength(evt, paidAmount.getText(), 10);
        if (Character.isLetter(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_paidAmountKeyTyped

    private void txt_DiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_DiscountKeyReleased
        if (!txt_subTotal.getText().isEmpty() && !txt_Discount.getText().isEmpty()) {
            if (Double.parseDouble(txt_Discount.getText()) > 101) {
                getNetTotal();
            }
        }
    }//GEN-LAST:event_txt_DiscountKeyReleased

    private void txt_DiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_DiscountActionPerformed
        paidAmount.grabFocus();
    }//GEN-LAST:event_txt_DiscountActionPerformed

    private void paidAmountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidAmountKeyReleased
        if (!paidAmount.getText().isEmpty()) {
            double netValue = Double.parseDouble(txt_netTotal.getText());
            double paid = Double.parseDouble(paidAmount.getText());
            balance.setText(decimalformat.format(paid - netValue));
        }
    }//GEN-LAST:event_paidAmountKeyReleased

    private void cardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardActionPerformed
        if (card.isSelected()) {
            paidAmount.setText(txt_netTotal.getText());
        }
    }//GEN-LAST:event_cardActionPerformed

    private void cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashActionPerformed
        if (cash.isSelected()) {
            paidAmount.setText("0.00");
        }
    }//GEN-LAST:event_cashActionPerformed

    private void btn_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SaveActionPerformed
        if (customerId == null) {
            JOptionPane.showMessageDialog(this, "Select the customer before save", "Select the customer", JOptionPane.WARNING_MESSAGE);
        } else {
            if (date.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Select the date before save", "Select the Date", JOptionPane.WARNING_MESSAGE);
            } else {
                SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
                String paymentType;
                if (cash.isSelected()) {
                    paymentType = "Cash";
                } else {
                    paymentType = "Card";
                }
                try {
                    DB.iud("INSERT INTO invoice VALUES('" + invoice_ID.getText() + "','" + customerId + "','" + paymentType
                            + "','" + txt_subTotal.getText() + "','" + txt_Discount.getText() + "','" + txt_netTotal.getText() + "','" + paidAmount.getText()
                            + "','" + balance.getText() + "','" + dateFomrmat.format(new Date()) + "','" + time.format(new Date()) + "','1')");

                    for (int i = 0; i < table.getRowCount(); i++) {
                        DB.iud("INSERT INTO invoice_item (id_invoice, idproduct_stock, unit, qty, value) VALUES('" + invoice_ID.getText() + "','" + table.getValueAt(i, 1).toString()
                                + "','" + table.getValueAt(i, 4).toString() + "','" + table.getValueAt(i, 5).toString() + "','" + table.getValueAt(i, 7).toString() + "')");
                        DB.iud("UPDATE product_stock SET qty = qty - '" + table.getValueAt(i, 5).toString() + "' WHERE idproduct_stock = '" + table.getValueAt(i, 1).toString() + "' ");
                    }
                    new Save().setVisible(true);
                    printInvoice();
                    clearAlll();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btn_SaveActionPerformed

    private void qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyTyped
        Validation.setDigitsOnly(evt);
        Validation.setLength(evt, qty.getText(), 5);
    }//GEN-LAST:event_qtyKeyTyped

    private void qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyReleased
        if (!qty.getText().isEmpty()) {
            double newQty = Double.parseDouble(qty.getText());
            for (int i = 0; i < table.getRowCount(); i++) {
                if (table.getValueAt(i, 1).equals(stock_id)) {
                    newQty += Double.parseDouble(table.getValueAt(i, 5).toString());
                }
            }
            if (quantity >= newQty) {
                checkAvailability.setText("Available");
                checkAvailability.setForeground(Color.GREEN);
            } else {
                checkAvailability.setText("Qty Out of Stock");
                checkAvailability.setForeground(Color.RED);
            }
        }
    }//GEN-LAST:event_qtyKeyReleased

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        if (!qty.getText().isEmpty()) {
            if (checkAvailability.getText().equals("Available")) {

                DefaultTableModel dtm = (DefaultTableModel) table.getModel();
                int rowNo = 0;
                boolean sameProCode = true;

                for (int i = 0; i < table.getRowCount(); i++) {
                    if (table.getValueAt(i, 1).equals(stock_id)) {
                        sameProCode = false;
                        double addQty = Double.parseDouble(qty.getText());
                        double getQty = Double.parseDouble(table.getValueAt(i, 5).toString());
                        table.setValueAt(String.valueOf(addQty + getQty), i, 5);
                        table.setValueAt(decimalformat.format((addQty + getQty) * retailPrice), i, 7);
                    }
                }

                if (sameProCode) {
                    Vector v = new Vector();
                    v.add(++rowNo);
                    v.add(stock_id);
                    v.add(product_id);
                    v.add(product_name);
                    v.add(product_unit);
                    v.add(qty.getText());
                    v.add("0.00");
                    v.add(decimalformat.format(retailPrice * Double.parseDouble(qty.getText())));
                    dtm.addRow(v);
                }

                productCode.setText(null);
                productName.setText(null);
                unitProduct.setText(null);
                checkAvailability.setText(null);
                qty.setText(null);
                productCode.grabFocus();
            }

            getSubTotal();
            getNetTotal();
        }
    }//GEN-LAST:event_qtyActionPerformed

    private void productCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCodeActionPerformed
        if (!productCode.getText().isEmpty()) {
            productData(productCode.getText());
        }
    }//GEN-LAST:event_productCodeActionPerformed

    private void btn_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_findActionPerformed
        SearchProduct sp = new SearchProduct(menu, this);
        sp.setVisible(true);
    }//GEN-LAST:event_btn_findActionPerformed

    private void paidAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidAmountActionPerformed
        if (!paidAmount.getText().isEmpty()) {
            double netValue = Double.parseDouble(txt_netTotal.getText());
            double paid = Double.parseDouble(paidAmount.getText());
            balance.setText(decimalformat.format(paid - netValue));
            btn_Save.grabFocus();
        }
    }//GEN-LAST:event_paidAmountActionPerformed

    private void btn_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CancelActionPerformed
        clearAlll();
        productCode.setText(null);
        productName.setText(null);
        unitProduct.setText(null);
        checkAvailability.setText(null);
        qty.setText(null);
    }//GEN-LAST:event_btn_CancelActionPerformed

    private void panelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelFocusLost
        Exit_Warning ew = new Exit_Warning();
        if (JOptionPane.showConfirmDialog(this, ew.panel, "  Exit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_panelFocusLost

    private void tableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyTyped
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.removeRow(table.getSelectedRow());
        getSubTotal();
        getNetTotal();
    }//GEN-LAST:event_tableKeyTyped

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (evt.getClickCount() == 2) {
            new Item_Discount(menu, this,
                    table.getValueAt(table.getSelectedRow(), 1).toString(),
                    Double.parseDouble(table.getValueAt(table.getSelectedRow(), 5).toString())).setVisible(true);
        }
    }//GEN-LAST:event_tableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Invoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PaymentMethod;
    private javax.swing.JTextField balance;
    private javax.swing.JButton btn_Cancel;
    private javax.swing.JButton btn_Save;
    private javax.swing.JButton btn_find;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton card;
    private javax.swing.JRadioButton cash;
    private javax.swing.JLabel checkAvailability;
    private javax.swing.JComboBox<String> customer_Name;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JLabel invoice_ID;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField paidAmount;
    public javax.swing.JPanel panel;
    public javax.swing.JTextField productCode;
    private javax.swing.JLabel productName;
    private javax.swing.JTextField qty;
    public javax.swing.JTable table;
    private javax.swing.JTextField txt_Discount;
    private javax.swing.JTextField txt_netTotal;
    private javax.swing.JTextField txt_subTotal;
    private javax.swing.JLabel unitProduct;
    // End of variables declaration//GEN-END:variables

    private void tableSettings() {
        JTableHeader tableHeader = table.getTableHeader();
        tableHeader.setFont(new Font("Calibri", Font.BOLD, 14));
        ((DefaultTableCellRenderer) tableHeader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer right = new DefaultTableCellRenderer();
        right.setHorizontalAlignment(JLabel.RIGHT);

        table.getColumnModel().getColumn(0).setCellRenderer(center);
        table.getColumnModel().getColumn(1).setCellRenderer(center);
        table.getColumnModel().getColumn(4).setCellRenderer(center);
        table.getColumnModel().getColumn(5).setCellRenderer(center);
        table.getColumnModel().getColumn(6).setCellRenderer(right);
        table.getColumnModel().getColumn(7).setCellRenderer(right);
    }

    private void generateID() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
        try {
            ResultSet rs = DB.search("SELECT COUNT(id_invoice) AS id FROM invoice");
            if (rs.next()) {
                int rowCount = rs.getInt("id");
                rowCount++;
                invoice_ID.setText(sdf.format(new Date()) + "-" + String.format("%0" + 8 + "d", rowCount));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadCustomers() {
        try {
            ResultSet rs = DB.search("SELECT fname, lname FROM customer WHERE state = '1' ");
            while (rs.next()) {
                customer_Name.addItem(rs.getString("fname") + " " + rs.getString("lname"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void productData(String productID) {
        try {
            ResultSet stockData = DB.search("SELECT COUNT(product_stock.idproduct_stock) AS id, product_stock.idproduct_stock FROM product_stock WHERE product_stock.id_product='" + productCode.getText() + "' AND product_stock.qty > 0");
            if (stockData.next()) {
                if (stockData.getInt(1) > 1) { // if more than one stocks 
                    Select_Stock s = new Select_Stock(menu, productID, this);
                    s.setVisible(true);

                } else if (stockData.getInt(1) == 1) {
                    loadStockData(stockData.getString("idproduct_stock"));
                } else {
                    //JOptionPane.showMessageDialog(this, "There is no stock available in this product", "Out Of Stock", JOptionPane.INFORMATION_MESSAGE);
                    productName.setText("No stock available in this product");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadStockData(String stockID) {
        try {
            ResultSet rs = DB.search("SELECT  product_stock.idproduct_stock,product.id_product,product.productname,product_stock.unit,product_stock.qty,product_stock.retail_price "
                    + "FROM product_stock INNER JOIN product ON product_stock.id_product = product.id_product WHERE product_stock.idproduct_stock = '" + stockID + "' ");

            if (rs.next()) {
                stock_id = rs.getString(1);
                product_id = rs.getString(2);
                product_name = rs.getString(3);
                product_unit = rs.getString(4);
                quantity = rs.getDouble(5);
                retailPrice = rs.getDouble(6);

                productName.setText(product_name);
                unitProduct.setText(product_unit);
                qty.grabFocus();

            } else {
                JOptionPane.showMessageDialog(this, "Product Code is wrong, try again", "Wrong Product Code...", JOptionPane.ERROR_MESSAGE);
                productCode.setText(null);
                productCode.grabFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getSubTotal() {
        double tot = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            tot += Double.parseDouble(table.getValueAt(i, 7).toString());
        }
        txt_subTotal.setText(decimalformat.format(tot));
    }

    public void getNetTotal() {
        double pecentage = Double.parseDouble(txt_Discount.getText());
        double subAmount = Double.parseDouble(txt_subTotal.getText());
        double netValue = ((100 - pecentage) * subAmount) / 100;
        txt_netTotal.setText(decimalformat.format(netValue));
    }

    private void clearAlll() {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        generateID();
        customer_Name.setSelectedIndex(0);
        dtm.setRowCount(0);
        txt_subTotal.setText("0.00");
        txt_Discount.setText("0");
        txt_netTotal.setText("0.00");
        paidAmount.setText("0.00");
        balance.setText("0.00");
        customerId = null;
    }

    private void printInvoice() {
        menu.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String path = "jasperReports\\Invoice.jrxml";

            String s = new File(path).getAbsolutePath().replace("\\", "\\\\");
            String subReportpath = (s.split("Invoice.jrxml"))[0];

            Map<String, Object> m = new HashMap();
            m.put("subPath", subReportpath); // send subReport path
            m.put("invoice_no", invoice_ID.getText());

            JasperReport cp = JasperCompileManager.compileReport(path);
            JasperPrint fr = JasperFillManager.fillReport(cp, m, DB.getConnection());
            JasperViewer.viewReport(fr, false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
        menu.setCursor(null);
    }

}
